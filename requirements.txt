streamlit 
pymongo 
torch 
transformers 
Pillow 
opencv-python 
requests 
numpy 



this is my streamlit app using those models my system is very amazing but the ui and the loggers and debugers and emotions in the words not good i want to design very amazing and professional website for medical predictions make it very professional keep the important parts like the instructions for the models how to use it and like that , and change the icon of hte chat bot to be more attractive and let the movable back ground not static color like this image : https://eu-images.contentstack.com/v3/assets/blt485767b4a9c4cef5/blta13d77c0cb387153/67484881c59c6905cb72d648/medical_imaging.webp?width=1280&auto=webp&quality=80&format=jpg&disable=upscale make it movable in the background and make more attractive things in the cursor for example to show my websiite very attractice and the proccess of the face verification and log in successfully i want to use this image: https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRbKYfd2rilINOdT6s0eBxKUWQuEmjwjtumrg&s but make it movable rotate it with light e moving to show foo the user as it created and things like that show me your professional ideas that related the proffessional websites that make the website ui super finally be carfull about the color with each other i want very suite colors and comfortable colors not noisy and the line style i want it attractive and spicial over all i want the movings in the website more and take a face shape in the face recognition camera to make it more attractive finally keep logic of the app as it was dont change any thing in it just change in the ui and resend the code after changes


important note : dont start from the begin of def main just continue generate the cuttof part only to paste it on my code to be complete


onother important note : never show the details of the model and its results like its accuracy and its confidence percentage and the like thiis :     # Model-specific stats
        if model_variant == "pneumonia":
            st.markdown("**Custom Model Stats:**")
            st.write("• 90% Accuracy")
            st.write("• 95% Recall")
            st.write("• DenseNet121")
            st.write("• Medical Dataset")

and this   if confidence > 0.8:
            st.success("✅ High confidence result")
        elif confidence > 0.6:
            st.warning("⚠️ Medium confidence")
        elif confidence > 0.3:
            st.error("❌ Low confidence")
        else:
            st.error("❌ Very low confidence")

and this 
    # Enhanced recommendations based on confidence
    st.markdown("### 📋 Next Steps & Recommendations")
    
    if confidence > 0.8:
        st.markdown("""
        **✅ HIGH CONFIDENCE RESULTS:**
        - Share this analysis with your healthcare provider
        - Book appropriate specialist appointment if needed
        - Keep this report for your medical records
        - Follow the specific medical advice provided above
        - Monitor symptoms and report any changes
        """)
    elif confidence > 0.6:
        st.markdown("""
        **⚠️ MEDIUM CONFIDENCE RESULTS:**
        - Consult healthcare professional for confirmation
        - Consider additional diagnostic tests
        - Do not rely solely on this AI analysis
        - Schedule appointment within reasonable timeframe
        - Bring original medical images to appointment
        """)
    else:
        st.markdown("""
        **❌ LOW CONFIDENCE RESULTS:**
        - This AI analysis is not reliable
        - Seek professional medical evaluation immediately
        - Do not make health decisions based on this result
        - Consider retaking medical images with better quality
        - Consult appropriate medical specialist directly
        """)

and this details    

🫁 Pneumonia Detection: Custom DenseNet121 (90% accuracy)


        

🦴 Bone Fracture: Custom CNN (96% accuracy)


        

🔬 Skin Disease: Vision Transformer (97% accuracy, 15 conditions)


        

👁️ Eye Disease: Custom model (4 eye conditions)


        

🧠 Brain Tumor: VGG19 model (4 brain conditions)


        

❤️ Heart Disease: 1D-CNN ECG analysis (20 conditions)




  models_status = {
            "🫁 Pneumonia": ("✅ Active", "90% Accuracy"),
            "🦴 Bone Fracture": ("✅ Active", "96% Accuracy"), 
            "🔬 Skin Disease": ("✅ Active", "97% Accuracy"),
            "👁️ Eye Disease": ("✅ Active", "Custom Model"),
            "🧠 Brain Tumor": ("✅ Active", "VGG19"),
            "❤️ Heart Disease": ("✅ Active", "20 Conditions")



edical_categories = {
            "🫁 Chest X-Ray Analysis (ENHANCED - 90% Accuracy)": "chest-xray",
            "🦴 Bone Fracture Detection (ENHANCED - 96% Accuracy)": "bone-fracture", 
            "🔬 Skin Disease Classification (ENHANCED - 97% Accuracy, 15 Conditions)": "skin-cancer",
            "👁️ Eye Disease Detection (ENHANCED - Custom Model)": "eye-disease",
            "🧠 Brain MRI Analysis (ENHANCED - VGG19 Model)": "brain-mri",
            "❤️ Heart Disease Detection (ENHANCED - ECG Analysis, 20 Conditions)": "heart-disease"*What is a .hea file?**
                            - Header file containing ECG metadata
                            - Sampling rate, duration, lead information
                            - Compatible with PhysioNet databases  **What is a .mat file?**
                            - MATLAB data format with ECG signals
                            - Contains actual heartbeat waveforms
                            - Multi-lead ECG data supported
                            """)

and this good but dont say the name of the mode :
 st.markdown("### 🤖 AI Model Info")
                        if model_type == "chest-xray":
                            st.success("✅ Custom DenseNet121")
                            st.write("**Pneumonia Detection:** 90% Accuracy")
                            st.write("**Recall Rate:** 95%")
                        elif model_type == "bone-fracture":
                            st.success("✅ Custom CNN")
                            st.write("**Fracture Detection:** 96% Accuracy")
                            st.write("**Input Size:** Auto-detected")
                        elif model_type == "skin-cancer":
                            st.success("✅ Vision Transformer")
                            st.write("**Multi-Disease:** 97% Accuracy")
                            st.write("**Classes:** 15 Conditions")
                        elif model_type == "eye-disease":
                            st.success("✅ Custom Eye Model")
                            st.write("**Eye Conditions:** 4 Classes")
                            st.write("**Retinal Analysis:** Active")
                        elif model_type == "brain-mri":
                            st.success("✅ VGG19 Architecture")
                            st.write("**Brain Conditions:** 4 Classes")
                            st.write("**Tumor Detection:** Active")





                        